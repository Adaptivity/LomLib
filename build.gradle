buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.0-SNAPSHOT'
    }
}

repositories {
    ivy {
        name 'com.pahimar.ee3'
        artifactPattern "https://github.com/lluixhi/EE3-Builds/raw/master/1.6.4/[module]-1.6.4-[revision].[ext]"
    }
    ivy {
        name 'Forge FS legacy'
        artifactPattern "http://files.minecraftforge.net/[module]/[module]-dev-[revision].[ext]"
    }
    ivy {
        name 'CB FS'
        artifactPattern "http://www.chickenbones.craftsaddle.org/Files/New_Versions/1.6.4/[module]-dev%20[revision].[ext]"
    }
    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name 'MinecraftS3'
        url 'http://s3.amazonaws.com/Minecraft.Download/libraries'
    }
}

apply plugin: "forge"

def loadProperties(String sourceFileName) {
    def config = new Properties()
        def propFile = new File(sourceFileName)
            if (propFile.canRead()) {
                config.load(new FileInputStream(propFile))
                    for (Map.Entry property in config) {
                        ext[property.key] = property.value;
                    }
            }
}

loadProperties 'build.properties'

task Buildnumber {
    ant.propertyfile(file: "build.properties") {
        entry(key: 'buildNumber', type: 'int', operation: '+', value: 1)
    }
}

dependencies {
    compile name: 'EquivalentExchange3', version: 'pre2a.56', ext: 'jar'
    compile name: 'CodeChickenLib', version: '1.6.4-1.0.0.44', ext: 'jar'
    compile name: 'CodeChickenCore', version: '0.9.0.7', ext: 'jar'
    compile name: 'NotEnoughItems', version: '1.6.1.5_d1', ext: 'jar'
}

group = 'net.lomeli.lomlib'
archivesBaseName = 'LomLib'
version = "$releaseVersion"

minecraft {
    version = "$mcVersion-$forgeVersion" // grab latest forge
    assetDir = "build/vanilla/assets"
}

processResources {
    exclude '**/xcf/**'

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}


jar {
	appendix = "universal-$buildNumber"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    appendix = "dev-$buildNumber"
}

artifacts {
    archives deobfJar
}